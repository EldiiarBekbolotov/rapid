name: Build and Release

on:
  push:
    branches: [main]
    tags: ['v*']

env:
  QT_VERSION: '6.6.3'
  BUILD_DIR: build

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-22.04, macos-13, windows-2022]
        include:
          - os: ubuntu-22.04
            qt_arch: gcc_64
            qt_host: linux
            qt_target: desktop
            modules: "qtbase qtwebengine qtsvg qttools"
          - os: macos-13
            qt_arch: clang_64
            qt_host: mac
            qt_target: desktop
            modules: "qtbase qtwebengine qt5compat"
          - os: windows-2022
            qt_arch: win64_msvc2019_64
            qt_host: windows
            qt_target: desktop
            modules: "qtbase qtwebengine qtsvg qttools"

    steps:
      - uses: actions/checkout@v4

      - name: Install system dependencies
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential libgl1-mesa-dev libglu1-mesa-dev

      - name: Install Qt
        run: |
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            # Windows
            python -m pip install aqtinstall
            choco install -y 7zip
            python -m aqt install-qt windows desktop ${{ env.QT_VERSION }} win64_msvc2019_64 \
              -m qtbase qtwebengine qtsvg qttools \
              --outputdir "${{ runner.temp }}/Qt"
            echo "CMAKE_PREFIX_PATH=${{ runner.temp }}/Qt/${{ env.QT_VERSION }}/win64_msvc2019_64/lib/cmake" >> $GITHUB_ENV
            
          elif [[ "${{ runner.os }}" == "macOS" ]]; then
            # macOS - Install Qt with all required components
            brew install qt@6
            echo "CMAKE_PREFIX_PATH=$(brew --prefix qt@6)/lib/cmake" >> $GITHUB_ENV
            # Install additional Qt components
            brew install qt6-webengine
            brew install qt6-svg
            brew install qt6-tools
            
          else
            # Linux
            python -m pip install aqtinstall
            python -m aqt install-qt linux desktop ${{ env.QT_VERSION }} gcc_64 \
              -m qtbase qtwebengine qtsvg qttools \
              --outputdir "${{ runner.temp }}/Qt"
            echo "CMAKE_PREFIX_PATH=${{ runner.temp }}/Qt/${{ env.QT_VERSION }}/gcc_64/lib/cmake" >> $GITHUB_ENV
          fi

      - name: Build and Package
        run: |
          mkdir -p ${{ env.BUILD_DIR }}
          cd ${{ env.BUILD_DIR }}

          # Configure
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            cmake $GITHUB_WORKSPACE/qt_web_editor -G "Visual Studio 17 2022" -A x64 -DCMAKE_BUILD_TYPE=Release -DCMAKE_PREFIX_PATH="$CMAKE_PREFIX_PATH"
            cmake --build . --config Release -- /m:$NUMBER_OF_PROCESSORS
            
            # Package Windows
            mkdir -p package
            cp Release/*.exe package/
            cp Release/*.dll package/ 2>/dev/null || true
            cd package
            powershell -Command "Compress-Archive -Path * -DestinationPath ../Rapid-Windows.zip -Force"
            
          elif [[ "${{ runner.os }}" == "macOS" ]]; then
            cmake $GITHUB_WORKSPACE/qt_web_editor -DCMAKE_BUILD_TYPE=Release -DCMAKE_PREFIX_PATH="$CMAKE_PREFIX_PATH"
            cmake --build . --config Release -- -j$(sysctl -n hw.ncpu)
            
            # Package macOS
            brew install create-dmg
            APP_BUNDLE=$(find . -maxdepth 1 -name "*.app" | head -n 1)
            mkdir -p package
            create-dmg \
              --volname "Rapid" \
              --window-size 600 400 \
              --icon "$(basename "$APP_BUNDLE")" 150 185 \
              --app-drop-link 450 185 \
              --no-internet-enable \
              "package/Rapid.dmg" \
              "$APP_BUNDLE"
              
          else  # Linux
            cmake $GITHUB_WORKSPACE/qt_web_editor -DCMAKE_BUILD_TYPE=Release -DCMAKE_PREFIX_PATH="$CMAKE_PREFIX_PATH"
            cmake --build . --config Release -- -j$(nproc)
            
            # Package Linux
            mkdir -p package/Rapid
            cp -r bin/* package/Rapid/
            cd package
            tar -czvf Rapid-Linux-x86_64.tar.gz Rapid/
          fi

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: rapid-${{ runner.os }}
          path: |
            ${{ env.BUILD_DIR }}/package/*
            ${{ env.BUILD_DIR }}/Rapid-*
          retention-days: 7
