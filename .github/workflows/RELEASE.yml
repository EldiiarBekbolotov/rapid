name: Build and Release

on:
  push:
    branches: [main]
    tags: ['v*']


env:
  QT_VERSION: '6.6.3'
  BUILD_DIR: build
  ARTIFACT_NAME: Rapid

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-22.04, macos-13, windows-2022]
        include:
          - os: ubuntu-22.04
            qt_arch: gcc_64
            qt_host: linux
            artifact_suffix: Linux
            
          - os: macos-13
            qt_arch: clang_64
            qt_host: mac
            artifact_suffix: macOS
            
          - os: windows-2022
            qt_arch: win64_msvc2019_64
            qt_host: windows
            artifact_suffix: Windows
            qt_target: desktop
            modules: "qtbase qtwebengine qtsvg qttools"
          - os: macos-13
            qt_arch: clang_64
            qt_host: mac
            qt_target: desktop
            modules: "qtbase qtwebengine qt5compat"
          - os: windows-2022
            qt_arch: win64_msvc2019_64
            qt_host: windows
            qt_target: desktop
            modules: "qtbase qtwebengine qtsvg qttools"

    steps:
      - uses: actions/checkout@v4

      - name: Install system dependencies
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential libgl1-mesa-dev libglu1-mesa-dev

      - name: Install Qt
        run: |
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            # Windows
            python -m pip install aqtinstall
            choco install -y 7zip
            python -m aqt install-qt windows desktop ${{ env.QT_VERSION }} win64_msvc2019_64 \
              -m qtbase qtwebengine qtsvg qttools \
              --outputdir "${{ runner.temp }}/Qt"
            echo "CMAKE_PREFIX_PATH=${{ runner.temp }}/Qt/${{ env.QT_VERSION }}/win64_msvc2019_64/lib/cmake" >> $GITHUB_ENV
            
          elif [[ "${{ runner.os }}" == "macOS" ]]; then
            # macOS - Install Qt using aqtinstall
            python -m pip install aqtinstall
            python -m aqt install-qt mac desktop ${{ env.QT_VERSION }} clang_64 \
              -m qtwebengine \
              --outputdir "${{ runner.temp }}/Qt"
            echo "CMAKE_PREFIX_PATH=${{ runner.temp }}/Qt/${{ env.QT_VERSION }}/clang_64/lib/cmake" >> $GITHUB_ENV
            
          else
            # Linux
            python -m pip install aqtinstall
            python -m aqt install-qt linux desktop ${{ env.QT_VERSION }} gcc_64 \
              -m qtbase qtwebengine qtsvg qttools \
              --outputdir "${{ runner.temp }}/Qt"
            echo "CMAKE_PREFIX_PATH=${{ runner.temp }}/Qt/${{ env.QT_VERSION }}/gcc_64/lib/cmake" >> $GITHUB_ENV
          fi

      - name: Build
        run: |
          mkdir -p ${{ env.BUILD_DIR }}
          cd ${{ env.BUILD_DIR }}

          if [[ "${{ runner.os }}" == "Windows" ]]; then
            # Windows build
            cmake $GITHUB_WORKSPACE/qt_web_editor \
              -G "Visual Studio 17 2022" \
              -A x64 \
              -DCMAKE_BUILD_TYPE=Release \
              -DCMAKE_PREFIX_PATH="$CMAKE_PREFIX_PATH"
            cmake --build . --config Release -- /m:$NUMBER_OF_PROCESSORS
          else
            # macOS and Linux build
            cmake $GITHUB_WORKSPACE/qt_web_editor \
              -DCMAKE_BUILD_TYPE=Release \
              -DCMAKE_PREFIX_PATH="$CMAKE_PREFIX_PATH"
            if [[ "${{ runner.os }}" == "macOS" ]]; then
              cmake --build . --config Release -- -j$(sysctl -n hw.ncpu)
            else
              cmake --build . --config Release -- -j$(nproc)
            fi
          fi

      - name: Package
        if: success()
        run: |
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            # Package Windows
            pwsh -File "$GITHUB_WORKSPACE/scripts/package_win.ps1"
            
          elif [[ "${{ runner.os }}" == "macOS" ]]; then
            # Package macOS
            chmod +x "$GITHUB_WORKSPACE/scripts/package_mac.sh"
            "$GITHUB_WORKSPACE/scripts/package_mac.sh"
            
          else
            # Package Linux
            chmod +x "$GITHUB_WORKSPACE/scripts/package_linux.sh"
            "$GITHUB_WORKSPACE/scripts/package_linux.sh"
          fi

      - name: Upload Artifact
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: Rapid-${{ matrix.artifact_suffix }}
          path: |
            packages/**/*
            ${{ env.BUILD_DIR }}/Rapid-*
          retention-days: 7
          if-no-files-found: error
          compression-level: 9
