name: RELEASE

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

env:
  QT_VERSION: '6.6.3'
  BUILD_DIR: 'build'

jobs:
  build:
    name: Build (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
    - uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install Python deps
      run: |
        python -m pip install --upgrade pip
        python -m pip install aqtinstall py7zr

    - name: Install Qt on macOS
      if: runner.os == 'macOS'
      run: |
        brew update
        brew install qt@6
        echo "CMAKE_PREFIX_PATH=$(brew --prefix qt@6)/lib/cmake" >> $GITHUB_ENV

    - name: Install Qt on Ubuntu
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential libglu1-mesa-dev
        python -m aqt install-qt linux desktop ${{ env.QT_VERSION }} gcc_64 -m qtbase
        python -m aqt install-qt linux desktop ${{ env.QT_VERSION }} gcc_64 -m qtwebengine
        echo "CMAKE_PREFIX_PATH=$HOME/Qt/${{ env.QT_VERSION }}/gcc_64/lib/cmake" >> $GITHUB_ENV

    - name: Install Qt on Windows
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        choco install -y 7zip
        python -m aqt install-qt windows desktop $env:QT_VERSION win64_msvc2019_64 -m qtbase
        python -m aqt install-qt windows desktop $env:QT_VERSION win64_msvc2019_64 -m qtwebengine
        $qtPath = "C:\\Qt\\$env:QT_VERSION\\win64_msvc2019_64\\lib\\cmake"
        Add-Content -Path $Env:GITHUB_ENV -Value "CMAKE_PREFIX_PATH=$qtPath"

    - name: Configure and build (Linux/macOS)
      if: runner.os != 'Windows'
      run: |
        echo "CMAKE_PREFIX_PATH: $CMAKE_PREFIX_PATH"
        mkdir -p ${{ env.BUILD_DIR }}
        cd ${{ env.BUILD_DIR }}

        if command -v nproc >/dev/null; then
          JOBS=$(nproc)
        else
          JOBS=$(sysctl -n hw.ncpu)
        fi

        cmake $GITHUB_WORKSPACE/qt_web_editor -DCMAKE_BUILD_TYPE=Release -DCMAKE_PREFIX_PATH="$CMAKE_PREFIX_PATH"
        cmake --build . --config Release -- -j$JOBS

    - name: Create macOS DMG
      if: runner.os == 'macOS'
      run: |
        # Find the first .app bundle produced by the build
        APP_PATH=$(ls ${{ env.BUILD_DIR }}/*.app | head -n 1)
        echo "App bundle found at: $APP_PATH"
        
        # Create a dmg named MyApp.dmg inside build/dmg folder
        mkdir -p ${{ env.BUILD_DIR }}/dmg
        create-dmg --volname "MyApp" --window-size 600 400 --app-drop-link 450 185 "${{ env.BUILD_DIR }}/dmg/MyApp.dmg" "$APP_PATH"

    - name: Configure and build (Windows)
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        New-Item -ItemType Directory -Path $Env:BUILD_DIR -Force | Out-Null
        Set-Location $Env:BUILD_DIR
        cmake $Env:GITHUB_WORKSPACE\qt_web_editor -DCMAKE_BUILD_TYPE=Release -DCMAKE_PREFIX_PATH=$Env:CMAKE_PREFIX_PATH
        $jobs = $Env:NUMBER_OF_PROCESSORS
        cmake --build . --config Release -- /m:$jobs

    - name: Upload artifacts (Linux & Windows)
      if: runner.os != 'macOS'
      uses: actions/upload-artifact@v4
      with:
        name: build-${{ matrix.os }}
        path: |
          ${{ env.BUILD_DIR }}/*
          ${{ env.BUILD_DIR }}/bin/*
        retention-days: 5

    - name: Upload artifact (macOS DMG)
      if: runner.os == 'macOS'
      uses: actions/upload-artifact@v4
      with:
        name: macos-dmg
        path: ${{ env.BUILD_DIR }}/dmg/MyApp.dmg
        retention-days: 5
