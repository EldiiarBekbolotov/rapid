name: CI

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

env:
  QT_VERSION: '6.5.0'
  BUILD_DIR: 'build'

jobs:
  build:
    name: Build (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Debug - Environment
      shell: bash
      run: |
        echo "Runner OS: ${{ runner.os }}"
        echo "Runner temp: ${{ runner.temp }}"
        echo "Workspace: ${{ github.workspace }}"
        echo "Event: ${{ github.event_name }}"
        echo "Ref: ${{ github.ref }}"
        echo "Workflow: ${{ github.workflow }}"
    
    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install dependencies
      shell: bash
      run: |
        python -m pip install --upgrade pip
        python -m pip install aqtinstall py7zr

    - name: Install Qt
      shell: bash
      run: |
        echo "Installing Qt ${{ env.QT_VERSION }} for ${{ runner.os }}"

        # Normalize OS name for aqt install-qt (must be lowercase: mac, linux, windows)
        if [[ "${{ runner.os }}" == "macOS" ]]; then
          OS_NAME="mac"
          ARCH="clang_64"
        elif [[ "${{ runner.os }}" == "Linux" ]]; then
          OS_NAME="linux"
          ARCH="gcc_64"
          sudo apt-get update
          sudo apt-get install -y build-essential
        elif [[ "${{ runner.os }}" == "Windows" ]]; then
          OS_NAME="windows"
          ARCH="msvc2019_64"
          choco install -y 7zip
        else
          echo "Unsupported OS: ${{ runner.os }}"
          exit 1
        fi

        echo "Using architecture: $ARCH"

        # Install Qt
        python -m aqt install-qt $OS_NAME desktop ${{ env.QT_VERSION }} $ARCH -m qtwebengine

        # Set Qt path
        if [[ "$OS_NAME" == "windows" ]]; then
          QT_PATH="C:\\Qt\\${{ env.QT_VERSION }}\\$ARCH"
        else
          QT_PATH="$HOME/Qt/${{ env.QT_VERSION }}/$ARCH"
        fi

        echo "Qt installation path: $QT_PATH"
        echo "$QT_PATH/bin" >> $GITHUB_PATH
        echo "QT_PATH=$QT_PATH" >> $GITHUB_ENV

        # Verify qmake
        qmake --version || echo "qmake not found in PATH"
        which qmake || true

    - name: Configure and build
      shell: bash
      run: |
        echo "Current PATH: $PATH"
        echo "qmake location: $(which qmake || echo 'not found')"

        mkdir -p ${{ env.BUILD_DIR }}
        cd ${{ env.BUILD_DIR }}

        cmake $GITHUB_WORKSPACE/qt_web_editor \
          -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_PREFIX_PATH="$QT_PATH"

        # Use nproc on Linux/mac, fallback on Windows to number of processors env
        if [[ "$(uname)" == "Linux" || "$(uname)" == "Darwin" ]]; then
          JOBS=$(nproc)
        else
          JOBS=$env:NUMBER_OF_PROCESSORS
        fi

        cmake --build . --config Release -- -j$JOBS

    - name: Upload artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: build-${{ matrix.os }}
        path: |
          ${{ env.BUILD_DIR }}/*
          ${{ env.BUILD_DIR }}/bin/*
        retention-days: 1
